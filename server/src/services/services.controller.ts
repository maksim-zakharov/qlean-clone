import {Controller, Get, Logger, UseInterceptors} from '@nestjs/common';
import {ServicesService} from "./services.service";
import {CacheInterceptor, CacheKey, CacheTTL} from "@nestjs/cache-manager";
import {Context, Markup, Telegraf} from "telegraf";
import {PrismaService} from "../prisma.service";
import {OpenaiService} from "../openai/openai.service";
import {PorterStemmerRu} from 'natural';

@Controller('/api/services')
@UseInterceptors(CacheInterceptor)
export class ServicesController {
    private logger = new Logger(ServicesController.name);
    private keywordCache: Map<string, number> = new Map();

    constructor(
        private readonly prisma: PrismaService,
        private readonly bot: Telegraf,
        private readonly servicesService: ServicesService,
        private readonly openaiService: OpenaiService
    ) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –Ω—É–∂–Ω–æ, —Å–ø–∞—Å–∏–±–æ"
        bot.action('delete_message', async (ctx) => {
            try {
                await ctx.deleteMessage();
            } catch (error) {
                this.logger.error('Delete error:', error);
            }
        });
        this.bot.on('text', this.handleMessage.bind(this));
    }

    private normalizeText(text: string): string {
        return PorterStemmerRu.tokenizeAndStem(text)
            .join(' ')
            .replace(/[^–∞-—è—ë\s]/gi, '');
    }

    async handleMessage(ctx: Context) {
        try {
            const text = (ctx.message as any)?.text;
            if (!text) return;

            // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            const replyToId = ctx.message.message_id;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            const keywords: any[] = await this.prisma.keyword.findMany();
            const foundKeyword = keywords.find(kw =>
                this.normalizeText(text.toLowerCase()).includes(kw.value.toLowerCase())
            );

            let service;
            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ - –∏–¥–µ–º –≤ –±–∞–∑—É –∑–∞ —Å–µ—Ä–≤–∏—Å–æ–º
            if (foundKeyword?.serviceId) {
                service = await this.prisma.baseService.findUnique({
                    where: {id: foundKeyword.serviceId},
                    include: {
                        variants: true,
                        executors: true
                    }
                })
                this.logger.log(`–ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞ ${service?.name}`)
            }

            if (!service) {
                this.logger.log('–ù–µ –Ω–∞—à–ª–∏ —É—Å–ª—É–≥—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É, –∏–¥–µ–º –≤ GPT')
                service = await this.openaiService.detectBaseService(text);
            }

            // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ServiceVariant —á–µ—Ä–µ–∑ ChatGPT
            const {
                variant,
                displayName,
                keyPhrases
            } = await this.openaiService.detectServiceVariant(text, service.variants);

            this.logger.log(`–í–∞—Ä–∏–∞–Ω—Ç: ${variant.name}, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${displayName}, –Ω–∞–π–¥–µ–Ω–æ ${keyPhrases.length} —Ñ—Ä–∞–∑.`)
            if (keyPhrases.length) {
                await this.prisma.keyword.createMany({
                    data: keyPhrases.map(value => ({
                        value,
                        serviceId: service.id,
                        // variantId: detection.variantId
                    })),
                    skipDuplicates: true
                });
            }

            if (!variant) {
                this.logger.warn(`–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${service.name}`);
                return;
            }

            await ctx.replyWithMarkdown(
                `–ü—Ä–∏–≤–µ—Ç! –ú—ã –Ω–∞—à–ª–∏ ${service.executors.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è ${displayName}.`,
                {
                    // –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    reply_parameters: {
                        message_id: replyToId
                    },
                    reply_markup: {
                        inline_keyboard: [
                            [Markup.button.url('üîç –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', `https://t.me/qlean_clone_bot?startapp=service_${service.id}_variant_${variant.id}`)],
                            [
                                Markup.button.callback(
                                    '‚ùå –ù–µ –Ω—É–∂–Ω–æ, —Å–ø–∞—Å–∏–±–æ',
                                    'delete_message'
                                )
                            ]
                        ]
                    }
                }
            );
        } catch (error) {
            this.logger.error('Message handling error:', error);
        }
    }

    @Get('/')
    @CacheKey('SERVICES')
    @CacheTTL(3600 * 24)
    getAll() {
        return this.servicesService.getAll();
    }

    // @Post('/')
    // addAddress(@Body() {id, ...body}: Service): any {
    //     return this.servicesService.create(body);
    // }
    //
    // @Put('/:id')
    // editAddress(@Param('id') id: number, @Body() body: any): any {
    //     return this.servicesService.update(body);
    // }
    //
    // @Delete('/:id')
    // deleteAddress(@Param('id') id: number): any {
    //     return this.servicesService.delete(Number(id));
    // }
}
