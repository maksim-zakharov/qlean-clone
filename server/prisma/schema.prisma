generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Address {
  id    Int     @default(autoincrement()) @id
  userId String?
  name  String
  fullAddress  String
  comments  String?
}

enum OrderStatus {
  active
  completed
  canceled
}

model Order {
  id               Int              @id @default(autoincrement())
  baseService      BaseService      @relation(fields: [baseServiceId], references: [id])
  baseServiceId    Int
  serviceVariant   ServiceVariant   @relation(fields: [serviceVariantId], references: [id])
  serviceVariantId Int
  options          ServiceOption[]
  status  OrderStatus  @default(active)
  fullAddress String
  date DateTime @db.Timestamp(6)
  userId String?
  comment String?
}

model BaseService {
  id          Int              @id @default(autoincrement())
  name        String
  variants    ServiceVariant[]
  options     ServiceOption[]
  orders      Order[]
  keywords  Keyword[]
  executors   ServiceExecutors[]  // Добавляем обратное отношение
}

model ServiceVariant {
  id            Int          @id @default(autoincrement())
  name          String
  nameAccusative String @default("")      // "генеральную уборку"
  icon  String?
  basePrice     Int
  duration      Int
  baseService   BaseService  @relation(fields: [baseServiceId], references: [id])
  baseServiceId Int
  orders        Order[]
  keywords  Keyword[]
}

model ServiceOption {
  id            Int          @id @default(autoincrement())
  name          String
  price         Int
  description  String?
  duration      Int
  isPopular     Boolean      @default(false)
  baseService   BaseService  @relation(fields: [baseServiceId], references: [id])
  baseServiceId Int
  orders        Order[]
}

enum UserRole {
  client
  executor
  admin
}

model User {
  id  String          @id
  createdAt  DateTime   @default(now())
  firstName String
  role  UserRole  @default(client)
  lastName  String?
  photoUrl  String?
  username  String?
  phone  String?
  services   ServiceExecutors[]  // Обратное отношение
}

model Keyword {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  service   BaseService  @relation(fields: [serviceId], references: [id])
  serviceId      Int
  variant   ServiceVariant?   @relation(fields: [variantId], references: [id])
  variantId      Int?
}

model ServiceExecutors {
  service    BaseService @relation(fields: [serviceId], references: [id])
  serviceId  Int
  user       User        @relation(fields: [userId], references: [id])
  userId     String

  @@id([serviceId, userId])  // Составной первичный ключ
  @@index([userId])          // Дополнительный индекс
}