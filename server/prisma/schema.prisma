generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Address {
  id    Int     @default(autoincrement()) @id
  userId String?
  name  String
  fullAddress  String
  comments  String?
}

enum OrderStatus {
  active
  completed
  canceled
}

model Order {
  id               Int              @id @default(autoincrement())
  baseService      BaseService      @relation(fields: [baseServiceId], references: [id])
  baseServiceId    Int
  serviceVariant   ServiceVariant   @relation(fields: [serviceVariantId], references: [id])
  serviceVariantId Int
  options          ServiceOption[]
  status  OrderStatus  @default(active)
  fullAddress String
  date DateTime @db.Timestamp(6)
  userId String?
  executor      User?      @relation(fields: [executorId], references: [id])
  executorId String?
  comment String?
}

model BaseService {
  id          Int              @id @default(autoincrement())
  name        String
  variants    ServiceVariant[]
  options     ServiceOption[]
  orders      Order[]
  keywords  Keyword[]
  executors   ServiceExecutors[]  // Добавляем обратное отношение
}

model ServiceVariant {
  id            Int          @id @default(autoincrement())
  name          String
  nameAccusative String @default("")      // "генеральную уборку"
  icon  String?
  basePrice     Int
  duration      Int
  baseService   BaseService  @relation(fields: [baseServiceId], references: [id])
  baseServiceId Int
  orders        Order[]
  keywords  Keyword[]
  variants    ApplicationVariants[] // Связь с выбранными вариантами услуг
}

model ServiceOption {
  id            Int          @id @default(autoincrement())
  name          String
  price         Int
  description  String?
  duration      Int
  isPopular     Boolean      @default(false)
  baseService   BaseService  @relation(fields: [baseServiceId], references: [id])
  baseServiceId Int
  orders        Order[]
}

enum UserRole {
  client
  executor
  admin
}

model User {
  id  String          @id
  createdAt  DateTime   @default(now())
  firstName String
  role  UserRole  @default(client)
  lastName  String?
  photoUrl  String?
  username  String?
  phone  String?
  services   ServiceExecutors[]  // Обратное отношение
  orders   Order[]  // Обратное отношение
  scheduleDays ScheduleDay[]
  application Application? // 1-to-1 связь
}

model Keyword {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  service   BaseService  @relation(fields: [serviceId], references: [id])
  serviceId      Int
  variant   ServiceVariant?   @relation(fields: [variantId], references: [id])
  variantId      Int?
}

model ServiceExecutors {
  service    BaseService @relation(fields: [serviceId], references: [id])
  serviceId  Int
  user       User        @relation(fields: [userId], references: [id])
  userId     String

  @@id([serviceId, userId])  // Составной первичный ключ
  @@index([userId])          // Дополнительный индекс
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model ScheduleDay {
  id          Int         @id @default(autoincrement())
  dayOfWeek   DayOfWeek
  isDayOff    Boolean     @default(false)
  timeSlots   TimeSlot[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([userId, dayOfWeek])
}

model TimeSlot {
  id            Int         @id @default(autoincrement())
  time          DateTime    @db.Time(6) // Храним только время
  scheduleDay   ScheduleDay @relation(fields: [scheduleDayId], references: [id], onDelete: Cascade)
  scheduleDayId Int

  @@unique([scheduleDayId, time]) // Уникальная комбинация дня и времени
}

model Application {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String           @unique // 1-to-1 связь
  status      ApplicationStatus @default(PENDING)
  rejectionReason String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  variants    ApplicationVariants[] // Связь с выбранными вариантами услуг
}

model ApplicationVariants {
  application    Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId  Int
  variant        ServiceVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId      Int

  @@id([applicationId, variantId]) // Составной первичный ключ
}

enum ApplicationStatus {
  PENDING     // На модерации
  APPROVED    // Одобрено
  REJECTED    // Отклонено
}